;*******************************************************
; Testprog1.src
;*******************************************************
	device 16f84
;Symbol definieren
status  equ 3
zero    equ 2
carry   equ 0
rp0 	equ 5
trisa	equ 5
trisb	equ 6
porta	equ 5
portb	equ 6
pcl	equ 2
;temp 	equ 7

intcon	equ	0bh
inte	equ	4
intf	equ	1
gie	equ	7

option	equ	1
intedg	equ	6

;Hex-Zahlen: h am Ende, bei Zahlen mit Buchstaben an erster Stelle eine 0 davor
;wert	equ 0ch
;alterw	equ 13
counter equ 0ch


	org 0

;Einsprung beim Einschalten (Power on)
cold
;	bsf	status,rp0	;auf Bank 1 umschalten
;	movlw	0
;	movwf	trisb		;PortB wird komplett als Ausgang geschaltet
;	bcf 	trisa,3		;RA3 wird Ausgang (Carry)
;	bcf		status,rp0	;zurueck auf Bank 0



	goto 	main
	nop
	nop
	nop
intup
	btfss	intcon,intf	;war es ein RB0-Signal?
	goto	intend		;nein, Fehler
	call	zaehlen
	bcf	intcon,intf	;Interrupt RB0 wird bearbeitet
intend
	retfie
	
main
	bsf	status,rp0	
	movlw	00000001b
	movwf	trisb	
	bcf	trisa,3
	bcf	option,intedg
	bcf	status,rp0
	bsf	intcon,inte
	bcf	intcon,intf
	bsf	intcon,gie

;Definieren von alterw mit aktuellem Wert an RA0
;	movf	porta,w		;PortA lesen
;	andlw	00000001b
;	movwf	alterw



;Hauptschleife
loop
	clrf	counter		;Reset und Startwert
	clrf	portb


loop1

;Reset aktiv?
	btfss	porta,1		;Reseteingang (0 = Reset)
	goto 	loop
;Inhibit aktiv?
	btfsc	porta,2		;Inhibiteingang
	goto 	loop2
	bsf	intcon,inte	;kein Inhibit -> RB0 Interrupt aktiv
	goto 	loop1

loop2
	bcf	intcon,inte	;RB0 Interrupt sperren 
	goto	loop1


;Takteingang lesen
;	movf	porta,w		;PortA komplett eingelesen
;	andlw	1		;Nur R0 ist von Interesse

;	xorwf	alterw,w	;Wenn beide gleich, keine Flanke
;	btfsc	status,zero	;Beide gleich, Zero gesetzt
;	goto	loop1		;Nichts passiert
;	movlw   1
;	xorwf	alterw		;Beinhaltet neuen Pegel an RA0
;	btfss	alterw,0
;	goto	loop1

;Richtige Flanke gefunden
zaehlen
	bcf	porta,3			;Carryausgang zuruecksetzen
	incf	counter		;Zarehler erhoehen
	movlw	0fh
	andwf	counter,w
	xorlw	10
	btfss	status,zero
	goto	ausgabe
	movlw	6
	addwf	counter
	movlw	0a0h
	xorwf	counter,w
	btfss	status,zero
	goto 	ausgabe
	clrf	counter
	bsf	porta,3

;Ausgabe auf Siebensegment ausgeben
ausgabe

	movf    counter,w
	call	convert
;alternative Methode um RB0 frei zu bekommen besteht darin, die Ruecksprungadressen in der Tabelle zu aendern (verdoppeln)
	movwf	portb
	bcf	porta,4
	bsf	porta,4
	swapf	counter,w
	call	convert
	movwf	portb
	bcf	porta,5
	bsf	porta,5
	return

;Setzt Binaerzaehler in Bitmuster fuer Siebensegment um
convert
	andlw	15
	addwf	pcl		;w=offset, der zum PCL addiert wird
	retlw	7eh		;0
	retlw	0ch		;1
	retlw	0b6h		;2
	retlw	9eh		;3
	retlw	0cch
	retlw	0dah
	retlw	0fah		;...
	retlw	0eh
	retlw	0feh
	retlw	0deh		;9
	retlw	00h		;ungueltig
	retlw	00h
	retlw	00h
	retlw	00h
	retlw	00h
	retlw	00h

	end

